#!/bin/env bash

__name="mondo"
__version="0.102"
__author="budRich"
__contact='robstenklippa@gmail.com'
__created="2018-01-25"
__updated="2018-08-31"

# environment variables
MONDO_DIR="${MONDO_DIR:-$HOME/.config/mondo}"

# add get here for fastest getting (~16ms)
[[ $1 = get ]] && {
  sed -n 's/^'"$2"'\b[[:space:]]*//p' \
  "$MONDO_DIR/themes/.current"
  exit
}

# global variables
__action=""
__force=0
__dateformat='+%Y-%m-%d'
__wt=""      # theme in memory
__wt_name="" # name of theme in memory

main(){
  local option

  eval set -- "$(getopt --name "$__name" \
    --options vh::n:g:a:l:t:fu: \
    --longoptions version,help::,new:,generate:,apply:,list:,template:,force,update: \
    -- "$@"
  )"

  while true; do
    [[ $1 = -- ]] && option="$1" || {
      option="${1##--}" 
      option="${option##-}"   
    }

    case "$option" in
      v | version ) printinfo version ; exit ;;
      h | help ) printinfo "${2:-}" shift 2 ; exit ;;

      f | force    )
                     __force=1
                     shift ;;  

      n | new      ) 
                     __action=new
                     newtheme "${2:-}"
                     shift 2 ;;
      t | template ) 
                     __action=template
                     newgenerator "${2:-}"
                     shift 2 ;;
      g | generate ) 
                     __action=generate
                     generatetheme "${2:-}"
                     shift 2 ;;
      a | apply    ) 
                     __action=apply
                     applytheme "${2:-}"
                     shift 2 ;;
      l | list     ) 
                     __action=list
                     mondolist "${2:-}"
                     shift 2 ;;
      u | update   ) 
                     __action=update
                     updategenerator "${2:-}"
                     shift 2 ;;

      -- ) shift; break ;;
      * ) break ;;

    esac
  done
}

mondolist(){
  local f

  case "$1" in

    theme* ) 
      ls "$MONDO_DIR/themes" \
      | grep -v '^_' | sort ;;

    generator* ) \
      ls "$MONDO_DIR/generator" | sort ;;

    var* )
      vf="$MONDO_DIR/themes/$__lastarg"
      [[ -f "$vf" ]] \
        && setwt "$__lastarg" \
        || __wt="$(cat "$MONDO_DIR/themes/.current")"
        # wt="$(cat "$MONDO_DIR/themes/.current")"
      echo "${__wt}" | awk '{printf "%-19s%s\n", "%%"$1"%%", $2}'

      # printf '%%%%%s%%%%%15s\n' 
    ;;

    icon*   )   
      for f in /usr/share/icons/*; do

        [[ -d "$f/cursors" ]] && continue
        [[ ${f##*/} = default ]] && continue
        echo "${f##*/}"
      done 

      for f in "$HOME"/.icons/*; do

        [[ -d "$f/cursors" ]] && continue
        [[ ${f##*/} = default ]] && continue
        echo "${f##*/}"
      done 
    ;;

    gtk    ) 
      for f in /usr/share/themes/*; do
        [[ -d "$f/gtk-2.0" ]] || continue
        echo "${f##*/}"
      done 

      for f in "$HOME"/.themes/*; do
        [[ -d "$f/gtk-2.0" ]] || continue
        echo "${f##*/}"
      done 
    ;;

    resource*  ) 
      xrdb -query \
        | awk '$1~/mondo/ {printf "%-22s%s\n",$1,$2}' ;;

    cursor* ) 
      for f in /usr/share/icons/*; do
        [[ -d "$f/cursors" ]] || continue
        [[ ${f##*/} = default ]] && continue
        echo "${f##*/}"
      done 

      for f in "$HOME"/.icons/*; do
        [[ -d "$f/cursors" ]] || continue
        [[ ${f##*/} = default ]] && continue
        echo "${f##*/}"
      done  
    ;;
  esac
}

updategenerator(){

  local trgtheme dir t

  dir="$MONDO_DIR/generator/$1"

  # comment
  [[ -d "$dir" ]] \
    || ERX "generator $1 doesn't exist."

  if [[ $1 != "${__lastarg:-}" ]]; then
    trgtheme="$MONDO_DIR/themes/$__lastarg"
    [[ -f "$trgtheme" ]] \
      || ERX "$MONDO_DIR/themes/$__lastarg doesn't exist"
    setwt "$__lastarg" && themetogenerator "$1"
  else
    for t in $(mondolist themes); do
      setwt "$t"
      themetogenerator "$1"
    done
  fi
}

applytheme(){
  local template gdir preop g

  setwt "$1"
  echo "${__wt}" > "$MONDO_DIR/themes/.current"

  [[ -x "$MONDO_DIR/pre-apply" ]] \
    && preop="$("$MONDO_DIR"/pre-apply)"

  for g in $(mondolist generator); do
    themetogenerator "$g"
    gdir="$MONDO_DIR/generator/$g"
    (
      target=""
      ext=""
      dependencies=()

      [[ -f "$gdir/_mondo-settings" ]] \
        && . "$gdir/_mondo-settings"

      [[ -n $ext ]] \
        && template="$gdir/${__wt_name}.$ext" \
        || template="$gdir/$__wt_name"

      [[ -n $target ]] \
        && cp -f "$template" "${target/'~'/$HOME}"

      [[ -f "$gdir/_mondo-apply" ]] \
        && "$gdir/_mondo-apply" "$template"
    )
  done

  [[ -f "$MONDO_DIR/post-apply" ]] \
    && "$MONDO_DIR/post-apply" "${preop}"
}

generatetheme(){
  local t g

  if [[ $1 = all ]]; then
    for t in $(mondolist themes); do 
      generatetheme "$t"
    done
  else
    setwt "$1"

    for g in $(mondolist generator); do
      themetogenerator "$g"
    done
  fi
}

newgenerator(){
  local src nmn dir filex

  src="$1"
  nmn="${src##*/}" nmn=${nmn//'.'/}
  dir="$MONDO_DIR/generator/$nmn"

  [[ -d "$dir" ]] \
    && ERX "generator $nmn already exist" \
    || mkdir -p "$dir"

  [[ -f "$__lastarg" ]] && filex="$__lastarg"

  newfile_generatorapply "$dir/_mondo-apply"
  newfile_generatorgenerate "$dir/_mondo-generate"
  newfile_generatorsettings "$dir/_mondo-settings"

  [[ -n "$filex" ]] \
    && cp -f "$__lastarg" "$dir/_mondo-template" \
    || touch "$dir/mondo-template"

  echo "$dir/_mondo-template"
}

newbase(){
  mkdir -p "$MONDO_DIR/themes"

  newfile_postapply 
  newfile_preapply  
  newfile_defaulttheme
  newfile_themetemplate
}

newtheme(){
  [[ -f "$MONDO_DIR/themes/$1" ]] && (($__force!=1)) \
    && ERX "theme $1 already exist"

  [[ -f "$MONDO_DIR/themes/_default" ]] \
    || newbase

  { 
    printf '!! %-10s%s\n' \
      "Theme:" "$1" \
      "Author:" "$USER" \
      "Created:" "$(date "$__dateformat")"

    cat "$MONDO_DIR/themes/_template"
  } > "$MONDO_DIR/themes/$1"
}


setwt(){
  # reads base theme
  # overwrite base theme with target theme ($1)

  [[ -f "$MONDO_DIR/themes/$1" ]] \
    || ERX "theme $1 doen't exist."

  __wt_name="$1"

  __wt="$(
    cd "$MONDO_DIR/themes"
    readtheme <(
      echo theme "$__wt_name"
      cat "$__wt_name" _default "$__wt_name")
  )"
}

themetogenerator(){
  local this_generator dir ext dep themename

  # generates a file (MONDO_DIR/generator/$1/THEME)
  # from a generator ($1) template

  this_generator="$1"
  dir="$MONDO_DIR/generator/$this_generator"

  [[ -d "$dir" ]] \
    || ERX "generator $this_generator doen't exist."

  if [[ -f "$dir/$__wt_name" ]] && (($__force!=1)); then
    [[ $__action = generate ]] \
      && ERR "theme $__wt_name is already in $this_generator."
    :
  else
    ext=""
    dependencies=()

    [[ -f "$dir/_mondo-settings" ]] \
      && . "$dir/_mondo-settings"
  

    # check dependencies (defined in _mondo-settings)
    for dep in "${dependencies[@]}"; do
      command -v > /dev/null 2>&1 "$dep" \
      || pacman -Ql "$dep" > /dev/null 2>&1 || {
        ERR "$dep is needed to use the " \
            "$this_generator generator"
        return
      }
    done

    [[ -n $ext ]] \
      && themename="$__wt_name.$ext" \
      || themename="$__wt_name"
      
    {
      echo "${__wt}"
      echo "__TEMPLATE"
      cat "$dir/_mondo-template"
    } | awk '

      start!=1 && $0!="__TEMPLATE" {
        cvar=$1
        $1=""
        sub(/[[:space:]]*/,"",$0)
        cval=$0
        vars[cvar]=cval
      }

      start==1 {
        for (k in vars){
          gsub("%%"k"%%",vars[k],$0)
        }
        print
      }

      $0=="__TEMPLATE" {start=1}
    ' > "$dir/$themename"

    [[ -f "$dir/_mondo-generate" ]] \
      && "$dir/_mondo-generate" "$dir/$themename"

  fi
}

readtheme(){
  awk '
    /./ && $1 !~ /^!/ {
      cvar=$1
      $1=""
      sub(/[[:space:]]*/,"",$0)
      cval=$0
      for (v in vars) {
        if (v==cvar || cval==v) {cval=vars[v]}
      }
      vars[cvar]=cval
    }

    END {
      for (v in vars) {
        printf "%-20s%s\n", v, vars[v]
      }
    }
  ' "$1"
}

newfile_preapply(){
local fil="$MONDO_DIR/pre-apply"
[[ -f "$fil" ]] || {
echo '#!/bin/bash

# This script is executed before anything else, 
# when mondo is executed with the apply option (-a).

# The intension of this script is to let you prepare
# your environment before applying a new theme.

# For instance one might want to kill certain processes
# before applying, since some programs might overwrite
# the new settings with the old. 

# the output from this script will get passed to
# post-apply, which is executed after a theme has
# been applied.
' > "$fil"
chmod +x "$fil" ;}
}

newfile_postapply(){
local fil="$MONDO_DIR/post-apply"
[[ -f "$fil" ]] || {
echo '#!/bin/bash

# This script is executed AFTER all other applying
# actions and scripts are finished, when mondo is 
# executed with the apply option (-a).

# The intension of this script is to let you adjust
# your environment after applying a new theme.

# For instance one might want to reload certain processes
# like windowmanagers and statusbars. 

# $1 in this script contains the output from
# `pre-apply`. By using eval you can pass multiple
# variables and stuff between the scripts.

# eval "${1}"
' > "$fil"
chmod +x "$fil" ;}
}

newfile_defaulttheme(){
local fil="$MONDO_DIR/themes/_default"
[[ -f "$fil" ]] || {
echo '
bg           #222222
bg2          #333333

fg           #DDDDDD
comment      #AAAAAA

red          #FF0000
green        #00FF00
blue         #0000FF
yellow       #FFFF00
cyan         #00FFFF
magenta      #FF00FF

dark         #000000
light        #FFFFFF

activebg     cyan
activefg     light
activehl     dark

inactivebg   blue
inactivefg   fg

selectedbg   magenta
selectedfg   light

fontface1    monospace
fontsize1    16

fontface2    fontface1
fontsize2    fontsize1

fg2          comment

redb         red
greenb       green
blueb        blue
yellowb      yellow
cyanb        cyan
magentab     magenta

gtktheme
icontheme
cursortheme
' > "$fil" ;}
}

newfile_themetemplate(){
local fil="$MONDO_DIR/themes/_template"
[[ -f "$fil" ]] || {
echo '
bg           #222222
bg2          #333333

fg           #DDDDDD
comment      #AAAAAA

red          #FF0000
green        #00FF00
blue         #0000FF
yellow       #FFFF00
cyan         #00FFFF
magenta      #FF00FF

dark         #000000
light        #FFFFFF

activebg     cyan
activefg     light
activehl     dark

inactivebg   blue
inactivefg   fg

selectedbg   magenta
selectedfg   light
' > "$fil" ;}
}

newfile_generatorapply(){
local fil="${1}"

echo '#!/bin/bash
# This script is executed every time a theme is applied.
# Each generator can have it'"'"'s own _mondo-apply script.

# The default syntax is bash, but by changing the shebang,
# one could use another language (f.i. perl or python).

# $1 is equal to: $MONOD_DIR/generator/TYPE/THEME[.extensions]

# If this script is not needed, this file can safely be removed.
# (removing the file, will improve execution speed)

# MONDO_DIR="${1%%/generator*}"
# THIS_DIR="${1%/*}"
# THIS_GENERATOR="${THIS_DIR##*/}"
# THIS_FILE="${1##*/}"
# THIS_THEME="${THIS_FILE%.*}"

# To source the settings file one could use this:
# source "${THIS_DIR}/_mondo-settings"
' > "$fil"
chmod +x "$fil"
}

newfile_generatorgenerate(){
local fil="${1}"

echo '#!/bin/bash
# This script is executed every time a theme is generated.
# Each generator can have it'"'"'s own _mondo-generate script.

# The default syntax is bash, but by changing the shebang,
# one could use another language (f.i. perl or python).

# $1 is equal to: $MONDO_DIR/generator/TYPE/THEME[.extensions]

# If this script is not needed, this file can safely be removed.
# (removing the file, will improve executioni speed)

# MONDO_DIR="${1%%/generator*}"
# THIS_DIR="${1%/*}"
# THIS_GENERATOR="${THIS_DIR##*/}"
# THIS_FILE="${1##*/}"
# THIS_THEME="${THIS_FILE%.*}"

# To source the settings file one could use this:
# source "${THIS_DIR}/_mondo-settings"
' > "$fil"
chmod +x "$fil"
}

newfile_generatorsettings(){
local fil="${1}"

echo '# The content of this file is sourced by mondo.
# The syntax is bash. But it is not recommended to
# add any script functions other then variable declaration
# in this file.

# whenever this generator is used to generate a theme
# all items in the dependcie array are checked to see
# if such command (`command -v`) exist, if not, pacmans
# local package database is searched.
# dependencies=()

# If ext is set, it will be appended as an extension
# when files are generated.
# ext=""

# target can be an (absolute) file path to where
# the file will be copied when a theme is applied.
# target=""
'  > "$fil"

if [[ -n $filex ]]; then
  fildir=$(dirname "$filex")
  [[ $fildir = '.' ]] && fildir=$(pwd)
  echo "target=\"${fildir/$HOME/'~'}/${filex##*/}\"" 
else
  echo "target=\"\""
fi >> "$fil"
}

printinfo(){
  local about bouthead boutfoot
about=\
'`mondo` - a theme template manager and generator

SYNOPSIS
--------
`mondo` `-v`|`-h`  
`mondo` `-a` THEME  
`mondo` `-n` NAME  
`mondo` [`-f`] `-g` THEME|all  
`mondo` [`-f`] `-u` GENERATOR [THEME]   
`mondo` `-l` theme|resource|icon|gtk|cursor   
`mondo` get VARIABLE   
`mondo` `-t` *FILE*|NAME [*FILE*]  

DESCRIPTION
-----------

`mondo` applies variables defined in themefiles to
templates defined in generators. `mondo` executes
userdefined scripts before any theme is applied, 
after each theme is applies and after all themes
are applied. It can also execute a script after each
theme is *generated*.

THEMES
------

Theme files are located in *MONDO_DIR*/themes, to 
create a new theme, use the `-n` option.

The first word of each line is the name of a 
**mondo variable**, the rest of the line (excluding 
white space between the first and the second word) 
will be the value of that variable. Below i create
a simple theme called `example`. (the theme name is
always it'"'"'s filename.)

``` shell
$ cat << EOF > ~/.config/mondo/themes/example
# example theme
author    Nils Kvist
blue #0000FF
fontface Terminus
EOF
```

*in the example above the theme file is created 
directly, it is strongly recommended to use: *  
`mondo -n THEME` *to create a theme*.  

Lines starting with `#`, will be ignored.
The example above would result in three variables:
  * author="Nils Kvist"
  * blue="#0000FF"
  * fontface="Terminus"

GENERATORS
----------

Generators are located in *MONDO_DIR*/generator.
To create a new generator use the `-t` option. The
only file that is needed for a generator to work is
*_mondo-template*. If a filename was the last argument
when `mondo` was executed with the `-t` (create generator)
option, *_mondo-template* will be a copy of that file.

In the template files, one can use the **mondo variables**
defined in the theme files by typing the name of the
variable enclosed in double (`%%`) percentage characters,
like this:  

``` text
$ cat << EOF > \
  ~/.config/mondo/generator/presentation/_mondo-template
My name is %%author%%, my favorite color is %%blue%%. 
I like to set my terminal font to:("%%fontface%%").
EOF
```

To process this template one can either use:  
`$ mondo -g THEME` this will *generate* (process),
all *_mondo-template* files in each **generator**.
`$ mondo -a THEME` will do the same thing AND apply
the generated files. We could also use:  
`$ mondo -u GENERATOR` this will generate all themes
for a specific GENERATOR.   

Lets say that our *MONDO_DIR* looks like this:  
``` file
~/.config/mondo
  generator/
    presentation/
      _mondo-template (presentation file)
      _mondo-settings
      _mondo-generate
      _mondo-apply
  themes/
    _default
    example
  post-apply
  pre-apply
```

If we where to execute the generate command on the
example theme:  
`$ mondo -g example`  

A file name example would get generated in presentation
directory after that the script *_mondo-generate* would get
executed (the scripts are empty by default).  

``` file
~/.config/mondo
  generator/
    presentation/
      _mondo-template (presentation file)
      _mondo-settings
      _mondo-generate
      _mondo-apply
      example (generated file)
  themes/
    _default
    example (theme file)
  post-apply
  pre-apply
```

`~/.config/mondo/generator/example`:  

``` text
My name is Nils Kvist, my favorite color is #0000FF. 
I like to set my terminal font to:("Terminus").
```

If we now would execute `mondo` with the apply `-a`
option on the `example` theme, the following would happen:  

`$ mondo -a example`  

1. the *pre-apply* script would get executed 
   (empty by default)  
2. if the theme is not generated, it would be generated
   following the same procedure as above, for each generator.  
3. If the variable `target` is set in *_mondo-settings,
   the generated file (*generator/presentation/example*),
   would be copied to the location specified as `target`  
4. *generator/presentation/_mondo-apply* would get executed.
   (*empty by default*)  
5. A file called `MONDO_DIR/themes/.current` is generated
   it contains all variables and is used when `mondo -l var|get`
   is executed.  
6. *post-apply* would get executed  

Most of the autogenerated files have useful comments.  

OPTIONS
-------

`-v`  
Show version and exit.

`-h`  
Show help and exit.

`-a` THEME  
Apply THEME. The following will happen:  

[`-f`] `-g` THEME|all   
Generate THEME. If `-f` is used, any existing generated
files will get overwritten. If all is the argument, all
themes will get generated.

[`-f`] `-u` GENERATOR [THEME]   
Update GENERATOR. This will update all themes, but 
only for the given GENERATOR. If `-f` is used, any 
existing generated files will get overwritten. If
the last argument is the name of an existing theme,
only that theme will get generated.

`-n` NAME  
Create a new theme.  


`-t` *FILE*|NAME [*FILE*]   
Create a new generator. If the last argument
is a path to an existing file, that file will be
used to create the template (it will copy the file
to *_mondo-template*, and add the path to the 
target variable in *_mondo-settings*). If a path
is the only argument, the filename without extension
and leading dot will be used as the name for the 
generator.

`-l` theme|resource|icon|gtk|cursor|generator 
Prints a list about the argument to stdout.

get VAR  
Prints the value of VAR from the last applied theme
(*MONDO_DIR/themes/.current).  

FILES
-----

*MONDO_DIR/mondo-xres*  
This file will get generated, when a theme is  
applied (`-a`). The content of this file is the 
theme, written in a format that can be read by
`xrdb` (`.Xresources`,`.Xdefaults`).

*MONDO_DIR/pre-apply*  
This file get executed BEFORE any other action  
when a THEME is applied (`-a`).   

*MONDO_DIR/post-apply*  
This file get executed AFTER all other actions are    
executed when a THEME is applied (`-a`).  

*_mondo-apply*  
This file is auto generated with each generator.   
It will get executed when a THEME is applied (`-a`).   

*_mondo-generate*  
This file is auto generated with each generator.   
It will get executed when a THEME is generated (`-g`).   

*_mondo-settings*  
This file is auto generated with each generator.   
It contains settings that will affect the generator.  

*_mondo-template*  
This file is auto generated with each generator.   
This is the template file for the generator.  

*themes/_default*  
All user created themes will inherit the content of
this file, it can be used to set common variables.

ENVIRONMENT
-----------

`MONDO_DIR`  
The path to a directory where all mondo files are   
stored. Defaults to `~/.config/mondo`
'

bouthead="
${__name^^} 1 ${__updated} Linux \"User Manuals\"
=======================================

NAME
----
"

boutfoot="
AUTHOR
------

${__author} <${__contact}>
<https://budrich.github.io>

"
  case "$1" in
    # print version info to stdout
    version )
      printf '%s\n' \
        "$__name - version: $__version" \
        "updated: $__updated by $__author"
      exit
      ;;
    # print help in markdown format to stdout
    md ) printf '%s' "# ${about}" ;;

    # print help in markdown format to README.md
    mdg ) printf '%s' "# ${about}" > "${__dir}/README.md" ;;
    
    # print help in troff format to __dir/__name.1
    man ) 
      printf '%s' "${bouthead}" "${about}" "${boutfoot}" \
      | go-md2man > "${__dir}/${__name}.1"
    ;;

    # print help to stdout
    * ) 
      printf '%s' "${about}" | awk '
         BEGIN{ind=0}
         $0~/^```/{
           if(ind!="1"){ind="1"}
           else{ind="0"}
           print ""
         }
         $0!~/^```/{
           gsub("[`*]","",$0)
           if(ind=="1"){$0="   " $0}
           print $0
         }
       '
    ;;
  esac
}

ERR(){ >&2 echo "[WARNING]" "$*"; }
ERX(){ >&2 echo "[ERROR]" "$*" && exit 1 ; }

init(){
  set -o errexit
  set -o pipefail
  set -o nounset
  # set -o xtrace

  __source="$(readlink -f "${BASH_SOURCE[0]}")"
  __dir="$(cd "$(dirname "${__source}")" && pwd)"
  __file="${__dir}/$(basename "${__source}")"
  __base="$(basename ${__file} .sh)"
  __root="$(cd "$(dirname "${__dir}")" && pwd)" # <-- change this as it depends on your app
}

init
__lastarg=""
eval __lastarg="\${$#}"
main "${@}"
